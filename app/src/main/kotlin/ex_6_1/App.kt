/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package ex_6_1

import java.lang.RuntimeException

sealed class Option<out A> {
    abstract fun isEmpty(): Boolean

    fun <B> map(f: (A) -> B): Option<B> = when (this) {
        is None -> None
        is Some -> Some(f(value))
    }


        fun getOrElse(default:()-> @UnsafeVariance A): A =
            when (this){
                is None -> default()
                is Some -> value
            }

    internal object None: Option<Nothing>() {
        override fun isEmpty()=true
        override fun toString(): String = "None"
        override fun equals(other:Any?): Boolean = other ===None
        override fun hashCode(): Int = 0
    }
    internal data class Some<out A> (internal val value : A) : Option<A>() {
        override fun isEmpty()= false
    }
    companion object {
        operator fun <A> invoke (a:A?=null): Option<A> =
            when(a) {
                null -> None
                else -> Some(a)
            }
    }
}


fun max(list : List<Int>): Option<Int>  = Option.invoke(list.maxOrNull())
fun getDefault(): Int = throw RuntimeException()



class App {
    val greeting: String
        get() {
            return "Hello World!"
        }
    public fun max() : Int? = null
}

fun main() {
    println(App().greeting)
    val max1=max(listOf(3,5,7,2,1)).getOrElse(::getDefault)
    println(max1)
    val max2=max(listOf()).getOrElse(::getDefault)
    println(max2)
}
